# -*- coding: utf-8 -*-
"""PROYECTO #5 (MACHINE LEARNING) - RESTREPO, SANTAMARIA, YEPES

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_7AbNvFcamFVPbqhJL44_zTe9cIpVbrZ

# **PROYECTO #5**

Paula Alejandra Restrepo Velásquez

Andrés Felipe Santamaria Robayo

Wilman Junior Yepes Vasquez
"""

import pandas as pd
import numpy as np
import scipy.stats as st
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

open("/content/drive/MyDrive/AB_NYC_2019.csv", 'r', encoding='utf-8')

df=pd.read_csv("/content/drive/MyDrive/AB_NYC_2019.csv")

df.head(10) #Primeros 10 registros.

df.tail (10) #Últimos 10 registros.

df.shape #Tamaño de la Matriz.

df.columns #Nombre de las columnas (No requieren modificación).

df.info()

df["host_name"].value_counts() #¿Existen categorías importantes?.

df["last_review"].value_counts()

df["name"]=df["name"].astype("category")
df["host_name"]=df["host_name"].astype("category")
df["neighbourhood_group"]=df["neighbourhood_group"].astype("category")
df["neighbourhood"]=df["neighbourhood"].astype("category")
df["room_type"]=df["room_type"].astype("category") #Modificación tipo de datos.

df_fil = df.filter(['id','name','host_id','host_name','neighbourhood_group','neighbourhood','latitude','longitude','room_type','price','minimum_nights','last_review','reviews_per_month','calculated_host_listings_count','availability_365'])

df_fil.describe()

df['media_p']=152.7 #Agregar nuevas columnas.
df['comparacion_precio']= df['price']- df['media_p'] #Nueva columna es la comparacion del precio de cada hotel con el promedio de los precios.

df

df_fil.describe()

from datetime import datetime
from datetime import timedelta

df['last_review']=pd.to_datetime(df['last_review']) #Modificación tipo de datos.

df #Vista general.

df.info() #Vista general.

!pip install missingno
import missingno as msno
msno.matrix(df) #Identificación gráfica de los missing values.

df.isnull() #Missing Values.

df.isnull().sum() #Suma de los Missing Values por columnas.

df.info()

df['name'].fillna(df['name'].mode()[0], inplace=True)
df['host_name'].fillna(df['host_name'].mode()[0], inplace=True)
df['last_review'].fillna(df['last_review'].mode()[0], inplace=True) #Al ser datos categóricos, serán rellenados con la moda.

df['reviews_per_month'].fillna(df['reviews_per_month'].mean(), inplace=True) #Se reemplazan por la media de los datos.

df.isnull().sum() #Ya no existen missing values.

from scipy.spatial.distance import mahalanobis
from scipy.stats import chi2
import scipy.stats as stats

df_maha=df[["price", "minimum_nights", "number_of_reviews", "reviews_per_month", "calculated_host_listings_count",
       "availability_365", "comparacion_precio"]] #Numpy requiere unicamente variables númericas

mahal_distances = []
for row in df_maha.to_numpy():
  mahal_distances.append(mahalanobis(row, df_maha.mean(), np.linalg.inv(np.cov(df_maha.values.T))))

df['mahal_distances'] = mahal_distances
df['p_value'] = 1 - stats.chi2.cdf (df['mahal_distances'], 18-1)

df

sns.heatmap(df.corr(), annot=True) #Datos Inconsistentes

df.drop_duplicates(inplace=True)

df.duplicated().sum() #Datos Duplicados

"""# **VISUALIZACIÓN DE LOS DATOS**

***Datos Categóricos Relevantes: neighbourhood_group, neighbourhood, room_type***
"""

df.info()

for col in df.select_dtypes("category").columns:
  df[col].value_counts().plot(kind="bar")
  if col == "neighbourhood_group":
    df[col].value_counts()[:15].plot(kind="bar")
  plt.show()

for col in df.select_dtypes("category").columns:
  df[col].value_counts().plot(kind="bar")
  if col == "neighbourhood":
    df[col].value_counts()[:15].plot(kind="bar")
  plt.show()

for col in df.select_dtypes("category").columns:
  df[col].value_counts().plot(kind="bar")
  if col == "room_type":
    df[col].value_counts()[:15].plot(kind="bar")
  plt.show()

"""***Datos Númericos***"""

for col in df.select_dtypes(exclude="category").columns[1:]: 
  sns.distplot(df[col])
  plt.show() #Gráficos Datos Númericos

"""***Visualición Univariada***"""

sns.histplot(x=df["neighbourhood_group"])

sns.histplot(x=df["room_type"])

sns.boxplot(data=df, y='price')

"""**Visualización Bivariada**"""

sns.jointplot(y=df["price"],x=df["neighbourhood_group"])

v = "neighbourhood_group"
data = pd.concat([df["price"], df[v]], axis=1)
f, ax = plt.subplots(figsize=(8, 6))
fig = sns.boxplot(x=v, y="price", data=data)
fig.axis(ymin=0, ymax=600);

sns.jointplot(y=df["price"],x=df["room_type"])

v = "room_type"
data = pd.concat([df["price"], df[v]], axis=1)
f, ax = plt.subplots(figsize=(8, 6))
fig = sns.boxplot(x=v, y="price", data=data)
fig.axis(ymin=0, ymax=600);

"""***Visualización Multivariada***"""

corrmat = df.corr()
f, ax = plt.subplots(figsize=(12, 9))
sns.heatmap(corrmat, vmax=.8, square=True);